{"version":3,"sources":["components/Home.jsx","components/Success.jsx","isoCodeLists.js","components/BilingualTextInput.jsx","components/CheckBoxList.jsx","components/SelectInput.jsx","components/DateInput.jsx","firebase.js","components/MetadataForm.jsx","components/Submissions.jsx","serviceWorker.js","index.js"],"names":["Home","history","useHistory","Button","onClick","push","Submissions","Typography","eovList","roleCodes","progressCodes","React","memo","onChange","name","value","label","multiline","useState","en","fr","bilingualText","setBilingualText","handleChange","e","newData","target","TextField","fullWidth","InputProps","startAdornment","InputAdornment","position","prevProps","nextProps","options","optionLabels","checkedValues","setChecked","FormControl","style","minWidth","InputLabel","id","map","v","i","FormControlLabel","key","control","Checkbox","checked","includes","ele","arr","val","newCheckedValuesArray","filter","concat","Select","MenuItem","DateInput","utils","DateFnsUtils","margin","format","d","KeyboardButtonProps","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","camelToSentenceCase","text","result","replace","charAt","toUpperCase","slice","MetadataForm","props","state","title","abstract","eov","role","progress","dateStart","Date","records","database","ref","this","event","parentName","setState","Grid","container","direction","justify","alignItems","Paper","className","classes","paper","handleInputChange","type","required","variant","color","handleSubmitClick","Component","withStyles","root","flexGrow","overflow","padding","on","toJSON","Object","entries","Boolean","window","location","hostname","match","router","exact","path","component","Success","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wRAqBeA,EAjBF,WACX,IAAMC,EAAUC,cAEhB,OACE,6BACE,6CACA,kBAACC,EAAA,EAAD,CACEC,QAAS,WACPH,EAAQI,KAAK,UAFjB,yB,QCMSC,EAXK,WAClB,IAAML,EAAUC,cAChB,OACE,6BACE,oDACA,kBAACK,EAAA,EAAD,uCACA,kBAACJ,EAAA,EAAD,CAAQC,QAAS,kBAAMH,EAAQI,KAAK,UAApC,mB,+ECXOG,EAAU,CACrB,SACA,YACA,UACA,YACA,WACA,kBACA,yBACA,mBACA,kBACA,uBACA,mBACA,eACA,SACA,WACA,qBACA,wBACA,qBACA,qBACA,wBACA,mBAEWC,EAAY,CACvB,mBACA,YACA,QACA,OACA,cACA,aACA,iBACA,wBACA,YACA,YACA,SACA,UACA,WACA,eACA,SACA,WACA,eACA,cACA,SACA,eAGWC,EAAgB,CAC3B,aACA,WACA,YACA,cACA,WACA,QACA,YACA,aACA,UACA,UACA,QACA,mBACA,WACA,UACA,UACA,WACA,oBACA,a,4CCpBaC,MAAMC,MAzCM,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,SAAiBC,GAA6B,EAApCC,MAAoC,EAA7BD,MAAME,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UAAgB,EAChCC,mBAAS,CAAEC,GAAI,GAAIC,GAAI,KADS,mBACnEC,EADmE,KACpDC,EADoD,KAG1E,SAASC,EAAaC,GACpB,IAAMC,EAAO,2BAAQJ,GAAR,kBAAwBG,EAAEE,OAAOZ,KAAOU,EAAEE,OAAOX,QAC9DO,EAAiBG,GACjBZ,EAAS,CAAEa,OAAQ,CAAEZ,OAAMC,MAAOU,KAEpC,OACE,6BACE,4BAAKT,GACL,6BACE,kBAACW,EAAA,EAAD,CACEb,KAAM,KACNc,WAAS,EACTf,SAAUU,EACVM,WAAY,CACVC,eACE,kBAACC,EAAA,EAAD,CAAgBC,SAAS,SAAzB,OAGJf,UAAWA,KAGf,6BACE,kBAACU,EAAA,EAAD,CACEC,WAAS,EACTd,KAAM,KACND,SAAUU,EACVM,WAAY,CACVC,eACE,kBAACC,EAAA,EAAD,CAAgBC,SAAS,SAAzB,OAGJf,UAAWA,SAMJ,SAACgB,EAAWC,GAAZ,OAA0BD,EAAUlB,QAAUmB,EAAUnB,S,oCCkB1DJ,MAAMC,MAnDA,SAAC,GAOf,IANLC,EAMI,EANJA,SACAE,EAKI,EALJA,MACAD,EAII,EAJJA,KACAE,EAGI,EAHJA,MACAmB,EAEI,EAFJA,QACAC,EACI,EADJA,aACI,EACgClB,mBAAS,IADzC,mBACGmB,EADH,KACkBC,EADlB,KAOJ,OACE,kBAACC,EAAA,EAAD,CAAaC,MAAO,CAAEC,SAAU,MAC9B,kBAACC,EAAA,EAAD,CAAYC,GAAG,4BAA4B3B,GAC1CmB,EAAQS,KAAI,SAACC,EAAGC,GACf,OACE,kBAACC,EAAA,EAAD,CACEC,IAAKH,EACLI,QACE,kBAACC,EAAA,EAAD,CACEF,IAAKH,EACL9B,MAAO8B,EACP/B,KAAMA,EACNqC,QAASpC,EAAMqC,SAASP,GACxBhC,SAAU,SAACW,GACT,IAlBY6B,EAAKC,EAkBXC,EAAM/B,EAAEE,OAAOX,MACfyC,GAnBMH,EAoBVE,GApBeD,EAqBfjB,GApBRe,SAASC,GAAaC,EAAIG,QAAO,SAACZ,GAAD,OAAOA,IAAMQ,KAC1CC,EAAII,OAAOL,IAqBTf,EAAWkB,GAEX3C,EAAS,CACPa,OAAQ,CAAEZ,OAAMC,MAAOyC,QAK/BxC,MAAOoB,EAAaU,YAQf,SAACb,EAAWC,GAAZ,OAA0BD,EAAUlB,QAAUmB,EAAUnB,S,kBCjC1DJ,MAAMC,MAtBD,SAAC,GAOd,IANLG,EAMI,EANJA,MACAD,EAKI,EALJA,KACAE,EAII,EAJJA,MACAmB,EAGI,EAHJA,QACAC,EAEI,EAFJA,aACAvB,EACI,EADJA,SAEA,OACE,kBAAC0B,EAAA,EAAD,CAAaC,MAAO,CAAEC,SAAU,MAC9B,kBAACC,EAAA,EAAD,CAAYC,GAAG,4BAA4B3B,GAC3C,kBAAC2C,EAAA,EAAD,CAAQ7C,KAAMA,EAAMc,WAAS,EAACb,MAAOA,EAAOF,SAAUA,GACnDsB,EAAQS,KAAI,SAACC,EAAGC,GAAJ,OACX,kBAACc,EAAA,EAAD,CAAUZ,IAAKH,EAAG9B,MAAO8B,GACtBT,EAAaU,YAOT,SAACb,EAAWC,GAAZ,OAA0BD,EAAUlB,QAAUmB,EAAUnB,S,yBCC1D8C,EAjBG,SAAC,GAA+B,IAA7BhD,EAA4B,EAA5BA,SAAUE,EAAkB,EAAlBA,MAAOD,EAAW,EAAXA,KACpC,OACE,kBAAC,IAAD,CAAyBgD,MAAOC,KAC9B,kBAAC,IAAD,CACEC,OAAO,SACPrB,GAAG,qBACH3B,MAAM,qBACNiD,OAAO,aACPlD,MAAOA,EACPF,SAAU,SAACqD,GAAD,OAAOrD,EAAS,CAAEa,OAAQ,CAAEZ,OAAMC,MAAOmD,MACnDC,oBAAqB,CACnB,aAAc,mB,+BCLxBC,IAASC,cAVM,CACbC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,8CAKMR,QAAf,ECMA,SAASS,EAAoBC,GAC3B,IAAIC,EAASD,EAAKE,QAAQ,WAAY,OACtC,OAAOD,EAAOE,OAAO,GAAGC,cAAgBH,EAAOI,MAAM,G,IAGjDC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,MAAO,CAAEpE,GAAI,GAAIC,GAAI,IACrBoE,SAAU,CAAErE,GAAI,GAAIC,GAAI,IACxBuB,GAAI,GACJ8C,IAAK,GACLC,KAAM,GACNC,SAAU,GACVC,UAAW,IAAIC,KACfC,QAAS,IAXM,E,0LAgBX1B,EAAS2B,WAAWC,IAAI,QAAQ3F,KAAK4F,KAAKX,O,OAChDW,KAAKZ,MAAMpF,QAAQI,KAAK,Y,8IAER6F,GAA4B,IAArBC,EAAoB,0DACnBD,EAAMxE,OAAtBZ,EADmC,EACnCA,KAAMC,EAD6B,EAC7BA,MAEVoF,EACFF,KAAKG,UAAS,SAACd,GAAD,mBAAC,eACVA,GADS,kBAEXa,EAFW,YAAC,eAEMb,EAAMa,IAFb,kBAE2BrF,EAAOC,SAE3CkF,KAAKG,UAAS,SAACd,GAAD,mBAAC,eAAgBA,GAAjB,kBAAyBxE,EAAOC,S,+BAG7C,IAAD,OACP,OACE,kBAACsF,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,SACVC,QAAQ,gBACRC,WAAW,WAEX,kBAACC,EAAA,EAAD,CAAOC,UAAWV,KAAKZ,MAAMuB,QAAQC,OACnC,kEACA,kBAACtG,EAAA,EAAD,8MAOF,kBAACmG,EAAA,EAAD,CAAOC,UAAWV,KAAKZ,MAAMuB,QAAQC,OACnC,kBAACtG,EAAA,EAAD,0CACA,kBAAC,EAAD,CACES,MAAM,gBACNF,KAAK,QACLC,MAAOkF,KAAKX,MAAMC,MAClB1E,SAAU,SAACW,GAAD,OAAO,EAAKsF,kBAAkBtF,OAI5C,kBAACkF,EAAA,EAAD,CAAOC,UAAWV,KAAKZ,MAAMuB,QAAQC,OACnC,kBAACtG,EAAA,EAAD,yCACA,kBAACoB,EAAA,EAAD,CACEoF,KAAK,OACL/F,MAAM,cACNF,KAAK,KACLC,MAAOkF,KAAKX,MAAM3C,GAClB9B,SAAU,SAACW,GAAD,OAAO,EAAKsF,kBAAkBtF,IACxCI,WAAS,EACToF,UAAQ,KAIZ,kBAACN,EAAA,EAAD,CAAOC,UAAWV,KAAKZ,MAAMuB,QAAQC,OACnC,kBAACtG,EAAA,EAAD,sCACA,kBAAC,EAAD,CACES,MAAM,gBACNF,KAAK,OACLC,MAAOkF,KAAKX,MAAMI,KAClB7E,SAAU,SAACW,GAAD,OAAO,EAAKsF,kBAAkBtF,IACxCW,QAAS1B,EACT2B,aAAc3B,EAAUmC,IAAIiC,MAGhC,kBAAC6B,EAAA,EAAD,CAAOC,UAAWV,KAAKZ,MAAMuB,QAAQC,OACnC,kBAACtG,EAAA,EAAD,+CACA,kBAAC,EAAD,CACEO,KAAK,MACLC,MAAOkF,KAAKX,MAAMG,IAClB5E,SAAU,SAACW,GAAD,OAAO,EAAKsF,kBAAkBtF,IACxCW,QAAS3B,EACT4B,aAAc5B,EAAQoC,IAAIiC,MAG9B,kBAAC6B,EAAA,EAAD,CAAOC,UAAWV,KAAKZ,MAAMuB,QAAQC,OACnC,kBAACtG,EAAA,EAAD,8BACA,kBAAC,EAAD,CACES,MAAM,gBACNF,KAAK,WACLC,MAAOkF,KAAKX,MAAMK,SAClB9E,SAAU,SAACW,GAAD,OAAO,EAAKsF,kBAAkBtF,IACxCW,QAASzB,EACT0B,aAAc1B,EAAckC,IAAIiC,MAIpC,kBAAC6B,EAAA,EAAD,CAAOC,UAAWV,KAAKZ,MAAMuB,QAAQC,OACnC,kBAACtG,EAAA,EAAD,8CACA,kBAAC,EAAD,CACES,MAAM,oBACNF,KAAK,WACLC,MAAOkF,KAAKX,MAAME,SAClB3E,SAAU,SAACW,GAAD,OAAO,EAAKsF,kBAAkBtF,IACxCP,WAAS,KAIb,kBAACyF,EAAA,EAAD,CAAOC,UAAWV,KAAKZ,MAAMuB,QAAQC,OACnC,kBAACtG,EAAA,EAAD,wDAGA,kBAAC,EAAD,CACEO,KAAK,YACLD,SAAU,SAACW,GAAD,OAAO,EAAKsF,kBAAkBtF,OAI5C,kBAACrB,EAAA,EAAD,CACE8G,QAAQ,YACRC,MAAM,UACN9G,QAAS,SAACoB,GAAD,OAAO,EAAK2F,kBAAkB3F,KAHzC,e,GA7HmB4F,aA0IZC,cA1JA,CACbC,KAAM,CACJC,SAAU,EACVC,SAAU,SACVC,QAAS,QAEXZ,MAAO,CACLY,QAAS,OACTzD,OAAQ,SAkJGqD,CAAmBjC,GCjInB9E,E,kDA/Bb,WAAY+E,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEQ,QAAS,IAFP,E,qLAKjB1B,EACG2B,WACAC,IAAI,QACJ0B,GAAG,SAAS,SAAC5B,GACZ,EAAKM,SAAS,CAAEN,QAASA,EAAQ6B,c,gIAKrC,OACE,6BACE,+CACA,kBAACpH,EAAA,EAAD,oDAEA,+BACGqH,OAAOC,QAAQ5B,KAAKX,MAAMQ,SAASlD,KAAI,mCAAOW,GAAP,kBACtC,4BACE,4BAAKA,EAAIgC,MAAMpE,c,GAvBHR,IAAMyG,WCQZU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAAMC,EACJ,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtI,IACjC,kBAAC,IAAD,CAAOqI,KAAK,OAAOC,UAAWlD,IAC9B,kBAAC,IAAD,CAAOiD,KAAK,WAAWC,UAAWC,IAClC,kBAAC,IAAD,CAAOF,KAAK,eAAeC,UAAWhI,MAK5CkI,IAASC,OAAON,EAAQO,SAASC,eAAe,SD8G1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2c997ce2.chunk.js","sourcesContent":["import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button } from \"@material-ui/core\";\n\nconst Home = () => {\n  const history = useHistory();\n\n  return (\n    <div>\n      <h1>Metadata Site</h1>\n      <Button\n        onClick={() => {\n          history.push(\"/new\");\n        }}\n      >\n        New Metadata record\n      </Button>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { Typography, Button } from \"@material-ui/core\";\n\nconst Submissions = () => {\n  const history = useHistory();\n  return (\n    <div>\n      <h1>Submission received!</h1>\n      <Typography>Thank you for your submission!</Typography>\n      <Button onClick={() => history.push(\"/new\")}>Make another!</Button>\n    </div>\n  );\n};\n\nexport default Submissions;\n","export const eovList = [\n  \"oxygen\",\n  \"nutrients\",\n  \"nitrate\",\n  \"phosphate\",\n  \"silicate\",\n  \"inorganicCarbon\",\n  \"dissolvedOrganicCarbon\",\n  \"seaSurfaceHeight\",\n  \"seawaterDensity\",\n  \"potentialTemperature\",\n  \"potentialDensity\",\n  \"speedOfSound\",\n  \"seaIce\",\n  \"seaState\",\n  \"seaSurfaceSalinity\",\n  \"seaSurfaceTemperature\",\n  \"subSurfaceCurrents\",\n  \"subSurfaceSalinity\",\n  \"subSurfaceTemperature\",\n  \"surfaceCurrents\",\n];\nexport const roleCodes = [\n  \"resourceProvider\",\n  \"custodian\",\n  \"owner\",\n  \"user\",\n  \"distributor\",\n  \"originator\",\n  \"pointOfContact\",\n  \"principalInvestigator\",\n  \"processor\",\n  \"publisher\",\n  \"author\",\n  \"sponsor\",\n  \"coAuthor\",\n  \"collaborator\",\n  \"editor\",\n  \"mediator\",\n  \"rightsHolder\",\n  \"contributor\",\n  \"funder\",\n  \"stakeholder\",\n];\n\nexport const progressCodes = [\n  \"deprecated\",\n  \"proposed\",\n  \"withdrawn\",\n  \"notAccepted\",\n  \"accepted\",\n  \"valid\",\n  \"tentative\",\n  \"superseded\",\n  \"retired\",\n  \"pending\",\n  \"final\",\n  \"underDevelopment\",\n  \"required\",\n  \"planned\",\n  \"onGoing\",\n  \"obsolete\",\n  \"historicalArchive\",\n  \"completed\",\n];\n","import React, { useState } from \"react\";\nimport { TextField, InputAdornment } from \"@material-ui/core\";\nconst BilingualTextInput = ({ onChange, value, name, label, multiline }) => {\n  const [bilingualText, setBilingualText] = useState({ en: \"\", fr: \"\" });\n\n  function handleChange(e) {\n    const newData = { ...bilingualText, [e.target.name]: e.target.value };\n    setBilingualText(newData);\n    onChange({ target: { name, value: newData } });\n  }\n  return (\n    <div>\n      <h5>{label}</h5>\n      <div>\n        <TextField\n          name={\"en\"}\n          fullWidth\n          onChange={handleChange}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">EN</InputAdornment>\n            ),\n          }}\n          multiline={multiline}\n        />\n      </div>\n      <div>\n        <TextField\n          fullWidth\n          name={\"fr\"}\n          onChange={handleChange}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">FR</InputAdornment>\n            ),\n          }}\n          multiline={multiline}\n        />\n      </div>\n    </div>\n  );\n};\nconst areEqual = (prevProps, nextProps) => prevProps.value === nextProps.value;\nexport default React.memo(BilingualTextInput, areEqual);\n","import React, { useState } from \"react\";\n\nimport {\n  Checkbox,\n  FormControlLabel,\n  FormControl,\n  InputLabel,\n} from \"@material-ui/core\";\n\nconst CheckBoxList = ({\n  onChange,\n  value,\n  name,\n  label,\n  options,\n  optionLabels,\n}) => {\n  const [checkedValues, setChecked] = useState([]);\n\n  function toggleArrayElement(ele, arr: []) {\n    if (arr.includes(ele)) return arr.filter((v) => v !== ele);\n    else return arr.concat(ele);\n  }\n  return (\n    <FormControl style={{ minWidth: 120 }}>\n      <InputLabel id=\"demo-simple-select-label\">{label}</InputLabel>\n      {options.map((v, i) => {\n        return (\n          <FormControlLabel\n            key={v}\n            control={\n              <Checkbox\n                key={v}\n                value={v}\n                name={name}\n                checked={value.includes(v)}\n                onChange={(e) => {\n                  const val = e.target.value;\n                  const newCheckedValuesArray = toggleArrayElement(\n                    val,\n                    checkedValues\n                  );\n                  setChecked(newCheckedValuesArray);\n\n                  onChange({\n                    target: { name, value: newCheckedValuesArray },\n                  });\n                }}\n              />\n            }\n            label={optionLabels[i]}\n          />\n        );\n      })}\n    </FormControl>\n  );\n};\n\nconst areEqual = (prevProps, nextProps) => prevProps.value === nextProps.value;\n\nexport default React.memo(CheckBoxList, areEqual);\n","import React from \"react\";\nimport { Select, MenuItem, FormControl, InputLabel } from \"@material-ui/core\";\n\nconst SelectInput = ({\n  value,\n  name,\n  label,\n  options,\n  optionLabels,\n  onChange,\n}) => {\n  return (\n    <FormControl style={{ minWidth: 120 }}>\n      <InputLabel id=\"demo-simple-select-label\">{label}</InputLabel>\n      <Select name={name} fullWidth value={value} onChange={onChange}>\n        {options.map((v, i) => (\n          <MenuItem key={v} value={v}>\n            {optionLabels[i]}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\nconst areEqual = (prevProps, nextProps) => prevProps.value === nextProps.value;\nexport default React.memo(SelectInput, areEqual);\n","import React from \"react\";\n\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\n\nconst DateInput = ({ onChange, value, name }) => {\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <KeyboardDatePicker\n        margin=\"normal\"\n        id=\"date-picker-dialog\"\n        label=\"Date picker dialog\"\n        format=\"MM/dd/yyyy\"\n        value={value}\n        onChange={(d) => onChange({ target: { name, value: d } })}\n        KeyboardButtonProps={{\n          \"aria-label\": \"change date\",\n        }}\n      />\n    </MuiPickersUtilsProvider>\n  );\n};\nexport default DateInput;\n","import firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyAdlELZS5Lbea5NquotMT8amwO-Lc_7ogc\",\n  authDomain: \"cioos-metadata-form.firebaseapp.com\",\n  databaseURL: \"https://cioos-metadata-form.firebaseio.com\",\n  projectId: \"cioos-metadata-form\",\n  storageBucket: \"cioos-metadata-form.appspot.com\",\n  messagingSenderId: \"646114203434\",\n  appId: \"1:646114203434:web:bccceadc5144270f98f053\",\n};\n\nfirebase.initializeApp(config);\n\nexport default firebase;\n","import React, { Component } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { eovList, progressCodes, roleCodes } from \"../isoCodeLists\";\nimport { TextField, Grid, Typography, Button, Paper } from \"@material-ui/core\";\n\nimport BilingualTextInput from \"./BilingualTextInput\";\nimport CheckBoxList from \"./CheckBoxList\";\nimport SelectInput from \"./SelectInput\";\nimport DateInput from \"./DateInput\";\nimport firebase from \"../firebase\";\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n    overflow: \"hidden\",\n    padding: \"10px\",\n  },\n  paper: {\n    padding: \"10px\",\n    margin: \"20px\",\n  },\n};\nfunction camelToSentenceCase(text) {\n  var result = text.replace(/([A-Z])/g, \" $1\");\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nclass MetadataForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      title: { en: \"\", fr: \"\" },\n      abstract: { en: \"\", fr: \"\" },\n      id: \"\",\n      eov: [],\n      role: \"\",\n      progress: \"\",\n      dateStart: new Date(),\n      records: {},\n    };\n  }\n\n  async handleSubmitClick() {\n    await firebase.database().ref(\"test\").push(this.state);\n    this.props.history.push(\"/success\");\n  }\n  handleInputChange(event, parentName = false) {\n    const { name, value } = event.target;\n\n    if (parentName) {\n      this.setState((state) => ({\n        ...state,\n        [parentName]: { ...state[parentName], [name]: value },\n      }));\n    } else this.setState((state) => ({ ...state, [name]: value }));\n  }\n\n  render() {\n    return (\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"space-between\"\n        alignItems=\"stretch\"\n      >\n        <Paper className={this.props.classes.paper}>\n          <h1>CIOOS Metadata Profile Intake Form</h1>\n          <Typography>\n            Welcome to the CIOOS metadata profile generation form! Please fill\n            out each field with as much detail as you can. Using this\n            information we will create your metadata profile for the given\n            dataset.\n          </Typography>\n        </Paper>\n        <Paper className={this.props.classes.paper}>\n          <Typography>What is the title of the dataset?</Typography>\n          <BilingualTextInput\n            label=\"Enter a title\"\n            name=\"title\"\n            value={this.state.title}\n            onChange={(e) => this.handleInputChange(e)}\n          />\n        </Paper>\n\n        <Paper className={this.props.classes.paper}>\n          <Typography>What is the ID for your dataset?</Typography>\n          <TextField\n            type=\"text\"\n            label=\"Your Answer\"\n            name=\"id\"\n            value={this.state.id}\n            onChange={(e) => this.handleInputChange(e)}\n            fullWidth\n            required\n          />\n        </Paper>\n\n        <Paper className={this.props.classes.paper}>\n          <Typography>Select a role for your datase</Typography>\n          <SelectInput\n            label=\"Select a role\"\n            name=\"role\"\n            value={this.state.role}\n            onChange={(e) => this.handleInputChange(e)}\n            options={roleCodes}\n            optionLabels={roleCodes.map(camelToSentenceCase)}\n          />\n        </Paper>\n        <Paper className={this.props.classes.paper}>\n          <Typography>Select EOVs that apply to your dataset</Typography>\n          <CheckBoxList\n            name=\"eov\"\n            value={this.state.eov}\n            onChange={(e) => this.handleInputChange(e)}\n            options={eovList}\n            optionLabels={eovList.map(camelToSentenceCase)}\n          />\n        </Paper>\n        <Paper className={this.props.classes.paper}>\n          <Typography>What is the progress?</Typography>\n          <SelectInput\n            label=\"Select a role\"\n            name=\"progress\"\n            value={this.state.progress}\n            onChange={(e) => this.handleInputChange(e)}\n            options={progressCodes}\n            optionLabels={progressCodes.map(camelToSentenceCase)}\n          />\n        </Paper>\n\n        <Paper className={this.props.classes.paper}>\n          <Typography>What is the abstract for the dataset?</Typography>\n          <BilingualTextInput\n            label=\"Enter an abstract\"\n            name=\"abstract\"\n            value={this.state.abstract}\n            onChange={(e) => this.handleInputChange(e)}\n            multiline\n          />\n        </Paper>\n\n        <Paper className={this.props.classes.paper}>\n          <Typography>\n            What is the start date that data was collected?\n          </Typography>\n          <DateInput\n            name=\"dateStart\"\n            onChange={(e) => this.handleInputChange(e)}\n          />\n        </Paper>\n\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={(e) => this.handleSubmitClick(e)}\n        >\n          Submit\n        </Button>\n        {/* </Box> */}\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(MetadataForm);\n","import React from \"react\";\nimport firebase from \"../firebase\";\nimport { Typography } from \"@material-ui/core\";\n\nclass Submissions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { records: {} };\n  }\n  async componentDidMount() {\n    firebase\n      .database()\n      .ref(\"test\")\n      .on(\"value\", (records) => {\n        this.setState({ records: records.toJSON() });\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Submission list</h1>\n        <Typography>These are the submissions we have received:</Typography>\n\n        <table>\n          {Object.entries(this.state.records).map(([key, val]) => (\n            <tr>\n              <td>{val.title.en}</td>\n            </tr>\n          ))}\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Submissions;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\nimport \"./index.css\";\nimport Home from \"./components/Home\";\nimport Success from \"./components/Success\";\nimport MetadataForm from \"./components/MetadataForm\";\nimport Submissions from \"./components/Submissions\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst router = (\n  <Router>\n    <div>\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/new\" component={MetadataForm} />\n      <Route path=\"/success\" component={Success} />\n      <Route path=\"/submissions\" component={Submissions} />\n    </div>\n  </Router>\n);\n\nReactDOM.render(router, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}